# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
ch: 6
nc: 5  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  #  n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
   s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  #  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  #  l: [1.00, 1.00, 1024]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  #  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
# from 表示当前模块的输入来自哪一层的输出 ，-1表示来自上一层的输出 ，层编号从0开始计
# repeats 表示当前模块的理论重复次数，实际的重复次数正是要根据上面的规模权重来计算后得到，这个参数会影响网络的整体深度
# module 模块类名，通过这个类名在common.py中寻找相应的类，进行模块化的搭建网络
# args 是一个列表，提供了模块搭建所需要的参数，channel, kernel_size, stride, padding, bias等
backbone:
  # [from, repeats, module, args]
  - [-1, 1, IN, []]  # 0

  # Two Stream

  ######### ManbaBlock One #############
  # stream one
  - [-1, 1, Multiin, [1]]  # 1
  - [-1, 1, DecomNet2, [64]]  # 2  B 3 640 640
  - [-1, 1, IN3, [64]]  # 3
  - [-1, 1, Conv, [64, 3, 2]]  # 4-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 5-P2/4
  - [-1, 3, C2f, [128, True]]  # 6
  - [-1, 1, Conv, [256, 3, 2]]  # 7-P3/8
  - [-1, 6, C2f, [256, True]]  # 8

    # stream two
  - [-9, 1, Multiin, [2]]  # 9
  - [-1, 1, Conv, [64, 3, 2]]  # 10-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 11-P2/4
  - [-1, 3, C2f, [128, True]]  # 12
  - [-1, 1, Conv, [256, 3, 2]]  # 13-P3/8
  - [-1, 6, C2f, [256, True]]  # 14


  ######### Alignment #############
  # alignment
  - [[8,14], 1, mutual_align2, [256]]  # 15  元组

  - [15, 1, IN1, []]  # 16

  ######### ManbaBlock Two #############

  # Manba fusion
  - [[15,2], 1, MambaBlock1, [256]]   # 17-P3/8
  - [[15,17], 1, Add2, [256,0]]    # 18-P3/8 stream one x+trans[0]
  - [[15,17], 1, Add2, [256,1]]    # 19-P3/8 stream two x+trans[1]



  ######### ManbaBlock Three #############
   # stream one
  - [ 18, 1, Conv, [512, 3, 2 ] ]  # 20-P4/16
  - [ -1, 6, C2f, [512, True ] ]  # 21

  # stream two
  - [ 19, 1, Conv, [512, 3, 2 ] ]  # 22-P4/16
  - [ -1, 6, C2f, [512, True ] ]  # 23

  ######### Alignment #############
  # alignment
  - [[21,23,16], 1, mutual_align2, [512]]  # 24

  - [24, 1, IN1, []]  # 25

  # Manba fusion
  - [[24,2], 1, MambaBlock1, [512]]   # 26-P3/8
  - [[24,26], 1, Add2, [512,0]]    # 27-P3/8 stream one x+trans[0]
  - [[24,26], 1, Add2, [512,1]]    # 28-P3/8 stream two x+trans[1]


  ######### ManbaBlock Four #############
  # stream one
  - [27, 1, Conv, [1024, 3, 2 ] ]  # 29-P5/32
  - [-1, 3, C2f, [1024, True ] ]  # 30
  - [-1, 1, SPPF, [1024, 5]]  # 31

  # stream two
  - [28, 1, Conv, [1024, 3, 2 ] ]  # 32-P5/32
  - [-1, 3, C2f, [1024, True ] ]  # 33
  - [-1, 1, SPPF, [1024, 5]]  # 34

  ######### Alignment #############
  # alignment
  - [[31,34,25], 1, mutual_align2, [1024]]  # 35


  # Manba fusion
  - [[35,2], 1, MambaBlock1, [1024]]   # 36-P3/8
  - [[35,36], 1, Add2, [1024,0]]    # 37-P3/8 stream one x+trans[0]
  - [[35,36], 1, Add2, [1024,1]]    # 38-P3/8 stream two x+trans[1]

  ######### Add Block #############

  - [[18, 19], 1, Add, [1]]  # 39-P3/8 fusion backbone P3
  - [[27, 28], 1, Add, [1]]  # 40-P4/16 fusion backbone P4
  - [[37, 38], 1, Add, [1]]  # 41-P5/32 fusion backbone P5


 # YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 42
  - [[-1, 40], 1, Concat, [1]]  # 43 cat backbone P4
  - [-1, 3, C2f, [512]]  # 44

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 45
  - [[-1, 39], 1, Concat, [1]]  #46 cat backbone P3
  - [-1, 3, C2f, [256]]  # 47 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]  # 48
  - [[-1, 44], 1, Concat, [1]]  # 49 cat head P4
  - [-1, 3, C2f, [512]]  # 50 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]  # 51
  - [[-1, 41], 1, Concat, [1]]  # 52 cat head P5
  - [-1, 3, C2f, [1024]]  # 53 (P5/32-large)

  - [[47, 50, 53], 1, OBB, [nc, 1]]  # Detect(P3, P4, P5)
