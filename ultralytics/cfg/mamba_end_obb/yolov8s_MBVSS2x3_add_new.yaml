# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
ch: 6
nc: 5  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  #  n: [0.33, 0.25, 1024]  # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
   s: [0.33, 0.50, 1024]  # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  #  m: [0.67, 0.75, 768]   # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  #  l: [1.00, 1.00, 1024]   # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  #  x: [1.00, 1.25, 512]   # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

# YOLOv8.0n backbone
# from 表示当前模块的输入来自哪一层的输出 ，-1表示来自上一层的输出 ，层编号从0开始计
# repeats 表示当前模块的理论重复次数，实际的重复次数正是要根据上面的规模权重来计算后得到，这个参数会影响网络的整体深度
# module 模块类名，通过这个类名在common.py中寻找相应的类，进行模块化的搭建网络
# args 是一个列表，提供了模块搭建所需要的参数，channel, kernel_size, stride, padding, bias等
backbone:
  # [from, repeats, module, args]
  - [-1, 1, IN, []]  # 0

  # Two Stream

  ######### ManbaBlock One #############
  # stream one
  - [-1, 1, Multiin, [1]]  # 1
  - [-1, 1, DecomNet2, [64]]  # 2  B 3 640 640
  - [-2, 1, Conv, [64, 3, 2]]  # 3-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 4-P2/4
  - [-1, 3, C2f, [128, True]]  # 5
  - [-1, 1, Conv, [256, 3, 2]]  # 6-P3/8
  - [-1, 6, C2f, [256, True]]  # 7

    # stream two
  - [-8, 1, Multiin, [2]]  # 8
  - [-1, 1, Conv, [64, 3, 2]]  # 9-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 10-P2/4
  - [-1, 3, C2f, [128, True]]  # 11
  - [-1, 1, Conv, [256, 3, 2]]  # 12-P3/8
  - [-1, 6, C2f, [256, True]]  # 13


  ######### ManbaBlock Two #############

  # Manba fusion
  - [[7,13,2], 1, MambaBlock, [256]]   # 14-P3/8
  - [[7,14], 1, Add2, [256,0]]    # 15-P3/8 stream one x+trans[0]
  - [[13,14], 1, Add2, [256,1]]    # 16-P3/8 stream two x+trans[1]



  ######### ManbaBlock Three #############
   # stream one
  - [ 15, 1, Conv, [512, 3, 2 ] ]  # 17-P4/16
  - [ -1, 6, C2f, [512, True ] ]  # 18

  # stream two
  - [ 16, 1, Conv, [512, 3, 2 ] ]  # 19-P4/16
  - [ -1, 6, C2f, [512, True ] ]  # 20


  # Manba fusion
  - [[18,20,14,2], 1, MambaBlock, [512]]   # 21-P3/8
  - [[18,21], 1, Add2, [512,0]]    # 22-P3/8 stream one x+trans[0]
  - [[20,21], 1, Add2, [512,1]]    # 23-P3/8 stream two x+trans[1]


  ######### ManbaBlock Four #############
  # stream one
  - [22, 1, Conv, [1024, 3, 2 ] ]  # 24-P5/32
  - [-1, 3, C2f, [1024, True ] ]  # 25
  - [-1, 1, SPPF, [1024, 5]]  # 26

  # stream two
  - [23, 1, Conv, [1024, 3, 2 ] ]  # 27-P5/32
  - [-1, 3, C2f, [1024, True ] ]  # 28
  - [-1, 1, SPPF, [1024, 5]]  # 29


  # Manba fusion
  - [[26,29,21,2], 1, MambaBlock, [1024]]   # 30-P3/8
  - [[26,30], 1, Add2, [1024,0]]    # 31-P3/8 stream one x+trans[0]
  - [[29,30], 1, Add2, [1024,1]]    # 32-P3/8 stream two x+trans[1]

  ######### Add Block #############

  - [[15, 16], 1, Add, [1]]  # 33-P3/8 fusion backbone P3
  - [[22, 23], 1, Add, [1]]  # 34-P4/16 fusion backbone P4
  - [[31, 32], 1, Add, [1]]  # 35-P5/32 fusion backbone P5


 # YOLOv8.0n head
head:
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 36
  - [[-1, 34], 1, Concat, [1]]  # 37 cat backbone P4
  - [-1, 3, C2f, [512]]  # 38

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 39
  - [[-1, 33], 1, Concat, [1]]  #40 cat backbone P3
  - [-1, 3, C2f, [256]]  # 41 (P3/8-small)

  - [-1, 1, Conv, [256, 3, 2]]  # 42
  - [[-1, 38], 1, Concat, [1]]  # 43 cat head P4
  - [-1, 3, C2f, [512]]  # 44 (P4/16-medium)

  - [-1, 1, Conv, [512, 3, 2]]  # 45
  - [[-1, 35], 1, Concat, [1]]  # 46 cat head P5
  - [-1, 3, C2f, [1024]]  # 47 (P5/32-large)

  - [[41, 44, 47], 1, OBB, [nc, 1]]  # Detect(P3, P4, P5)
